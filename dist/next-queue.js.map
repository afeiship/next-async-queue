{"version":3,"sources":["next-queue.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-queue.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n\n  var NxQueue = nx.declare('nx.Queue', {\n    statics: {\n      run: function() {\n        var args = nx.slice(arguments);\n        var queue = new nx.Queue(args);\n        return queue.start();\n      }\n    },\n    methods: {\n      init: function(inArray) {\n        this._callbacks = inArray || [];\n        this._thenCallback = nx.noop;\n        this._thenErrorCallback = nx.noop;\n        return this.make();\n      },\n      queue: function(inCallback) {\n        this._callbacks.push(inCallback);\n        return this.make();\n      },\n      dequeue: function(inCallback) {\n        var index = this._callbacks.indexOf(inCallback);\n        this._callbacks.splice(index >>> 0, 1);\n        return this.make();\n      },\n      make: function() {\n        var next,\n          self = this;\n        var length = this._callbacks.length;\n        var iterations = (this._iterations = Array(length));\n        var result = [];\n        var done = function(data) {\n          data && result.push(data);\n          self._thenCallback({ status: 'done', data: result });\n        };\n\n        nx.each(this._callbacks, function(i, callback) {\n          iterations[i] = function(data) {\n            next = iterations[i + 1] || done;\n            callback.call(self, next);\n            data && result.push(data);\n            self._thenCallback({ status: 'load', data: result });\n          };\n        });\n        return this;\n      },\n      then: function(inCallback, inErrorCallback) {\n        this._thenCallback = inCallback;\n        this._thenErrorCallback = inErrorCallback;\n        return this;\n      },\n      start: function() {\n        this._iterations[0]();\n        return this;\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxQueue;\n  }\n})();\n"]}